
Which operators can not be overloaded
============================================================================
- '.' , '*', '?:' ,'::',sizeof()


Resolving overloaded operators :-
============================================================================
When evaluating an expression containing an operator, the compiler uses the following rules:

1] If all of the operands are fundamental data types, the compiler will call a built-in routine if one exists. If one does not exist, the compiler will produce a compiler error.

2]If any of the operands are user data types (e.g. one of your classes, or an enum type), the compiler looks to see whether the type has a matching overloaded operator function that it can call. If it can’t find one, it will try to convert one or more of the user-defined type operands into fundamental data types so it can use a matching built-in operator (via an overloaded typecast, which we’ll cover later in this chapter). If that fails, then it will produce a compile error.

3] you can only overload the operators that exist. You can not create new operators or rename existing operators. For example, you could not create an operator ** to do exponents.

4]At least one of the operands in an overloaded operator must be a user-defined type. This means you can not overload the plus operator to work with one integer and one double. However, you could overload the plus operator to work with an integer and a Mystring.

5] all operators keep their default precedence and associativity (regardless of what they’re used for) and this can not be changed.

Ways to overload operatos
==========================================================

A] the friend function way : - Using a friend function to overload an operator is convenient because it gives you direct access to the internal members of the classes you’re operating on.
B] the member function way. :-  
C] normal function way  :- if you don’t need that access, you can write your overloaded operators as normal functions



==========================================================

# Overload I/O operators :-



Binary Operator ===> '+' , '-' , '*' , '/' , '%'
==========================================================









============================================================================
============================================================================
============================================================================
============================================================================
============================================================================
============================================================================
============================================================================

